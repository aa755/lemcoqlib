(* Generated by Lem from either.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Open Scope nat_scope.
Open Scope string_scope.



Lemma either_equal_1:( ( eitherEqual((inl false) :  sum  bool   bool ) (inl false)): Prop) .
Lemma either_equal_2:( ( negb (eitherEqual ((inl true) :  sum  bool   bool ) (inl false))): Prop) .
Lemma either_equal_3:( (  eitherEqual((inl true) :  sum  bool   bool ) (inl true)): Prop) .
Lemma either_equal_4:( ( eitherEqual((inr false) :  sum  bool   bool ) (inr false)): Prop) .
Lemma either_equal_5:( ( negb (eitherEqual ((inr false) :  sum  bool   bool ) (inr true))): Prop) .
Lemma either_equal_6:( ( negb (eitherEqual ((inr true) :  sum  bool   bool ) (inl true))): Prop) .
Lemma either_equal_7:( ( negb (eitherEqual ((inl true) :  sum  bool   bool ) (inr true))): Prop) .

Lemma either_pattern_1:( (match ( (inl true)) with  inl x => x | inr y => negb y end): Prop) .
Lemma either_pattern_2:( (match ( (inr false)) with  inl x => x | inr y => negb y end): Prop) .
Lemma either_pattern_3:( (negb (match ( (inl false)) with  inl x => x | inr y => negb y end)): Prop) .
Lemma either_pattern_4:( (negb (match ( (inr true)) with  inl x => x | inr y => negb y end)): Prop) .

Lemma isLeft_1 :( (((fun (x : sum (bool ) (bool )) =>
   match (x) with | inl _ => true | inr _ => false end) ((inl true) : sum  bool   bool ))): Prop) .
Lemma isLeft_2 :( (negb ((
  (fun (x : sum (bool ) (bool )) =>
     match (x) with | inl _ => true | inr _ => false end) ((inr true) : sum  bool   bool )))): Prop) .

Lemma isRight_1 :( ((
  (fun (x : sum (bool ) (bool )) =>
     match (x) with | inr _ => true | inl _ => false end) ((inr true) : sum  bool   bool ))): Prop) .
Lemma isRight_2 :( (negb ((
  (fun (x : sum (bool ) (bool )) =>
     match (x) with | inr _ => true | inl _ => false end) ((inl true) : sum  bool   bool )))): Prop) .

Lemma either_1:( ( Bool.eqb(either (negb) (fun (b : bool ) => b) (inl true)) false): Prop) .
Lemma either_2:( ( Bool.eqb(either (negb) (fun (b : bool ) => b) (inl false)) true): Prop) .
Lemma either_3:( ( Bool.eqb(either (negb) (fun (b : bool ) => b) (inr true)) true): Prop) .
Lemma either_4:( ( Bool.eqb(either (negb) (fun (b : bool ) => b) (inr false)) false): Prop) .

Lemma partitionEither_1:( ( ((tuple_equal_by (list_equal_by Bool.eqb) (list_equal_by Bool.eqb) (partitionEither [inl true; inr false; inr false;  inl false; inr true]) ([true;false], [false;false;true])))): Prop) .

Lemma lefts_1:( ( (list_equal_by Bool.eqb((@ fst _ _) (partitionEither [inl true; inr false; inr false;  inl false; inr true])) [true;false])): Prop) .


Lemma rights_1:( ( (list_equal_by Bool.eqb((@ snd _ _) (partitionEither [inl true; inr false; inr false;  inl false; inr true])) [false;false;true])): Prop) .


