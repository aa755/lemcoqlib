(* Generated by Lem from map.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Open Scope nat_scope.
Open Scope string_scope.



Lemma insert_equal_singleton:( ((fmap_equal_by beq_nat Bool.eqb (fmap_add ( 42%nat :  nat ) false fmap_empty) 
                                         (fmap_add( 42%nat) false fmap_empty))): Prop) .
Lemma commutative_insert_1:( ((fmap_equal_by beq_nat Bool.eqb 
                              (fmap_add ( 8%nat :  nat ) true  (fmap_add( 5%nat) false fmap_empty))
                              (fmap_add( 5%nat)        false (fmap_add( 8%nat) true fmap_empty)))): Prop) .
Lemma commutative_insert_2:( (negb ((fmap_equal_by beq_nat Bool.eqb
                              (fmap_add ( 8%nat :  nat ) true  (fmap_add( 8%nat) false fmap_empty))
                              (fmap_add( 8%nat)        false (fmap_add( 8%nat) true fmap_empty))))): Prop) .

Lemma empty_null:( (fmap_is_empty (fmap_empty :  fmap  nat   bool )): Prop) .

Lemma lookup_insert_1:( ( (maybeEqualBy Bool.eqb(fmap_lookup_by (genericCompare nat_ltb beq_nat)( 16%nat) (fmap_add ( 16%nat :  nat ) true fmap_empty)) (Some true))): Prop) .
Lemma lookup_insert_2:( ( (maybeEqualBy Bool.eqb(fmap_lookup_by (genericCompare nat_ltb beq_nat)( 16%nat) (fmap_add( 36%nat) false (fmap_add ( 16%nat :  nat ) true fmap_empty))) (Some true)) ): Prop) .
Lemma lookup_insert_3:( ( (maybeEqualBy Bool.eqb(fmap_lookup_by (genericCompare nat_ltb beq_nat)( 36%nat) (fmap_add( 36%nat) false (fmap_add ( 16%nat :  nat ) true fmap_empty))) (Some false)) ): Prop) .

Lemma lookup_empty_0:( ( (maybeEqualBy Bool.eqb(fmap_lookup_by (genericCompare nat_ltb beq_nat)( 25%nat) (fmap_empty :  fmap  nat   bool )) None)): Prop) .
Lemma find_insert_0:( ( (maybeEqualBy Bool.eqb(fmap_lookup_by (genericCompare nat_ltb beq_nat)( 16%nat) (fmap_add ( 16%nat :  nat ) true fmap_empty)) (Some true))): Prop) .

Lemma lookup_empty :( (forall k,( (maybeEqualBy (fun x y => x = y) (fmap_lookup_by mapKeyCompare k fmap_empty) None) : Prop)): Prop) .
Lemma lookup_insert:( (forall k  k'  v  m,( (maybeEqualBy (fun x y => x = y) (fmap_lookup_by mapKeyCompare k (fmap_add k' v m)) (if (k = k') then Some v else (fmap_lookup_by mapKeyCompare k m))) : Prop)): Prop) .

Lemma fromList_0:( ( (fmap_equal_by beq_nat Bool.eqb(fromList [(( 2%nat :nat ), true);(( 3%nat :nat ), true);(( 4%nat :nat ), false)])
                    (fromList [(( 4%nat :nat ), false);(( 3%nat :nat ), true);(( 2%nat :nat ), true)]))): Prop) .
(* later entries have priority *)
Lemma fromList_1:( ( (fmap_equal_by beq_nat Bool.eqb(fromList [(( 2%nat :nat ), true);(( 2%nat :nat ),false);(( 3%nat :nat ), true);(( 4%nat :nat ), false)])
                    (fromList [(( 4%nat :nat ), false);(( 3%nat :nat ), true);(( 2%nat :nat ), false)]))): Prop) .


Lemma toSet_0:( ( (set_equal_by (pairCompare (genericCompare nat_ltb beq_nat) boolCompare)(id (fmap_empty :  fmap  nat   bool )) [])): Prop) .
Lemma toSet_1:( ( (set_equal_by (pairCompare (genericCompare nat_ltb beq_nat) boolCompare)(id (fromList [(( 2%nat :nat ), true);( 3%nat, true);( 4%nat, false)])) 
                 [( 2%nat,true);  ( 3%nat, true);  ( 4%nat, false)])): Prop) .
Lemma toSet_2:( ( (set_equal_by (pairCompare (genericCompare nat_ltb beq_nat) boolCompare)(id (fromList [(( 2%nat :nat ), true);( 3%nat, true);( 2%nat,false); ( 4%nat, false)])) 
                 [( 2%nat,false);  ( 3%nat, true);  ( 4%nat, false)])): Prop) .

Lemma domain_0:( ( (set_equal_by (genericCompare nat_ltb beq_nat)(fmap_domain_by (genericCompare nat_ltb beq_nat) (fmap_empty :  fmap  nat   bool )) [])): Prop) .
Lemma domain_1:( ( (set_equal_by (genericCompare nat_ltb beq_nat)(fmap_domain_by (genericCompare nat_ltb beq_nat) (fromList [(( 2%nat :nat ), true);( 3%nat, true);( 4%nat, false)])) 
                 [ 2%nat;  3%nat;  4%nat])): Prop) .
Lemma domain_2:( ( (set_equal_by (genericCompare nat_ltb beq_nat)(fmap_domain_by (genericCompare nat_ltb beq_nat) (fromList [(( 2%nat :nat ), true);( 3%nat, true);( 2%nat,false); ( 4%nat, false)])) 
                 [ 2%nat;  3%nat;  4%nat])): Prop) .

Lemma range_0:( ( (set_equal_by boolCompare(fmap_range_by boolCompare (fmap_empty :  fmap  nat   bool )) [])): Prop) .
Lemma range_1:( ( (set_equal_by boolCompare(fmap_range_by boolCompare (fromList [(( 2%nat :nat ), true);( 3%nat, true);( 4%nat, false)])) 
                 [true;  false])): Prop) .
Lemma range_2:( ( (set_equal_by boolCompare(fmap_range_by boolCompare (fromList [(( 2%nat :nat ), true);( 3%nat, true);( 4%nat, true)])) [true])): Prop) .

Lemma member_insert_1:( ( (set_member_by (genericCompare nat_ltb beq_nat)( 16%nat) (fmap_domain_by (genericCompare nat_ltb beq_nat) (fmap_add ( 16%nat :  nat ) true fmap_empty)))): Prop) .
Lemma member_insert_2:( (negb ( (set_member_by (genericCompare nat_ltb beq_nat)( 25%nat) (fmap_domain_by (genericCompare nat_ltb beq_nat) (fmap_add ( 16%nat :  nat ) true fmap_empty))))): Prop) .
Lemma member_insert_3:( ( (set_member_by (genericCompare nat_ltb beq_nat)( 16%nat) (fmap_domain_by (genericCompare nat_ltb beq_nat) (fmap_add( 36%nat) false (fmap_add ( 16%nat :  nat ) true fmap_empty))))): Prop) .

Lemma member_empty :( (forall k,( negb ( (set_member_by setElemCompare k (fmap_domain_by setElemCompare fmap_empty))) : Prop)): Prop) .
Lemma member_insert:( (forall k  k'  v  m,( Bool.eqb (set_member_by setElemCompare k (fmap_domain_by setElemCompare (fmap_add k' v m))) ((k = k') || (set_member_by setElemCompare k (fmap_domain_by setElemCompare m))) : Prop)): Prop) . 

Lemmaall_def_lemma:((forallP m,(Bool.eqb (forall k  v,( (P k v && ( (maybeEqualBy (fun x y => x = y)(fmap_lookup_by mapKeyCompare k m) (Some v)))) : Prop)) 
  (fmap_all P m) : Prop)): Prop) .

Lemma any_0:( (negb (fmap_all (fun (k : nat ) (v : bool ) => negb ((fun (_k : nat ) (v : bool ) => v) k v)) (fmap_add( 36%nat) false (fmap_add ( 16%nat :  nat ) true fmap_empty)))): Prop) .
Lemma any_1:( (negb (negb (fmap_all (fun (k : nat ) (v : bool ) => negb ((fun (_k : nat ) (v : bool ) => v) k v)) (fmap_add( 36%nat) false (fmap_add ( 16%nat :  nat ) false fmap_empty))))): Prop) .
Lemma any_2:( (negb (fmap_all (fun (k : nat ) (v : bool ) => negb ((fun (_k : nat ) (v : bool ) => negb v) k v)) (fmap_add( 36%nat) false (fmap_add ( 16%nat :  nat ) true fmap_empty)))): Prop) .
Lemma any_3:( (negb (negb (fmap_all (fun (k : nat ) (v : bool ) => negb ((fun (_k : nat ) (v : bool ) => negb v) k v)) (fmap_add( 36%nat) true (fmap_add ( 16%nat :  nat ) true fmap_empty))))): Prop) .

Lemma all_0:( (fmap_all (fun (_k : nat ) (v : bool ) => v) (fmap_add( 36%nat) true (fmap_add ( 16%nat :  nat ) true fmap_empty))): Prop) .
Lemma all_1:( (negb (fmap_all (fun (_k : nat ) (v : bool ) => v) (fmap_add( 36%nat) true (fmap_add ( 16%nat :  nat ) false fmap_empty)))): Prop) .
Lemma all_2:( (fmap_all (fun (_k : nat ) (v : bool ) => negb v) (fmap_add( 36%nat) false (fmap_add ( 16%nat :  nat ) false fmap_empty))): Prop) .
Lemma all_3:( (negb (fmap_all (fun (_k : nat ) (v : bool ) => negb v) (fmap_add( 36%nat) false (fmap_add ( 16%nat :  nat ) true fmap_empty)))): Prop) .

Lemma delete_insert_1:( (negb ( (set_member_by (genericCompare nat_ltb beq_nat)( 5%nat :  nat ) (fmap_domain_by (genericCompare nat_ltb beq_nat) ((fmap_delete_by (genericCompare nat_ltb beq_nat)( 5%nat) (fmap_add( 5%nat) true fmap_empty))))))): Prop) .
Lemma delete_insert_2:(      ( (set_member_by (genericCompare nat_ltb beq_nat)( 7%nat :  nat ) (fmap_domain_by (genericCompare nat_ltb beq_nat) ((fmap_delete_by (genericCompare nat_ltb beq_nat)( 5%nat) (fmap_add( 7%nat) true fmap_empty)))))): Prop) .
Lemma delete_delete:( (fmap_is_empty ((fmap_delete_by (genericCompare nat_ltb beq_nat) ( 5%nat :  nat ) ((fmap_delete_by (genericCompare nat_ltb beq_nat) ( 5%nat :  nat ) (fmap_add( 5%nat) true fmap_empty)))))): Prop) .

Lemma map_0 :( ( (fmap_equal_by beq_nat Bool.eqb(fmap_map (fun (b : bool ) => negb b) (fmap_add ( 2%nat :nat ) true (fmap_add ( 3%nat :nat ) false fmap_empty)))
                (fmap_add ( 2%nat :nat ) false (fmap_add ( 3%nat :nat ) true fmap_empty)))): Prop) .

Lemma empty_size:( ( beq_nat(set_cardinal ((fmap_domain_by (genericCompare nat_ltb beq_nat) (fmap_empty :  fmap  nat   bool ))))( 0%nat)): Prop) .
Lemma singleton_size:( ( beq_nat(set_cardinal ((fmap_domain_by (genericCompare nat_ltb beq_nat) (fmap_add ( 2%nat :nat ) ( 3%nat :nat ) fmap_empty))))( 1%nat)): Prop) .
