(* Generated by Lem from string.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Open Scope nat_scope.
Open Scope string_scope.



Lemma char_simple_0:( negb ( (char_equal 0 ((1) :ascii ))): Prop) .
Lemma char_simple_1:( negb ( (char_equal X Y)): Prop) . 
Lemma char_simple_2:( negb ( (char_equal \175 \000)): Prop) .
Lemma char_simple_3:( negb ( (char_equal   @)): Prop) .
Lemma char_simple_4:( negb ( (char_equal \\ \n)): Prop) . 
Lemma char_simple_5:( ( (char_equal    )): Prop) .
Lemma char_simple_6:( negb ( (list_equal_by (fun (left : ascii ) (right : ascii )=>(char_equal left right))[ ;  ; `; \';~;\\] [])): Prop) .

Lemma string_simple_0:( negb ( (string_equal "Hello" ("Goodby" :string ))): Prop) .
Lemma string_simple_1:( negb ( (string_equal "Hello
World" "Goodby !")): Prop) .
Lemma string_simple_2:( negb ( (string_equal "123_\	-+!?X_&" "!'")): Prop) .
Lemma string_simple_3:( ( (string_equal "Hello World" ("Hello World" :string ))): Prop) . (* TODO: check *)

Lemma toCharList_0 :( ( (list_equal_by (fun (left : ascii ) (right : ascii )=>(char_equal left right))(string_to_char_list "Hello") [H; e; l; l; o])): Prop) .
Lemma toCharList_1 :( ( (list_equal_by (fun (left : ascii ) (right : ascii )=>(char_equal left right))(string_to_char_list "H
A") [H; \n; A])): Prop) . (* TODO: check *)

Lemma toString_0 :( ( (string_equal (string_from_char_list [H; e; l; l; o]) "Hello")): Prop) .
Lemma toString_1 :( ( (string_equal (string_from_char_list [H; \n; A]) "H
A")): Prop) .
LemmamakeString_def_lemma:((foralllen c,((string_equal (string_from_char_list (replicate len c)) (
  string_make_string len c)) : Prop)): Prop) .

Lemma makeString_0:( ( (string_equal (string_make_string( 0%nat) a) "")): Prop) .
Lemma makeString_1:( ( (string_equal (string_make_string( 5%nat) a) "aaaaa")): Prop) .
Lemma makeString_2:( ( (string_equal (string_make_string( 3%nat) c) "ccc")): Prop) . (* TODO: check *)

Lemma stringLength_0:( ( beq_nat(String.length "")( 0%nat)): Prop) .
Lemma stringLength_1:( ( beq_nat(String.length "abc")( 3%nat)): Prop) .
Lemma stringLength_2:( ( beq_nat(String.length "123456")( 6%nat)): Prop) .

Lemma stringAppend_0 :( ( (string_equal (String.append"Hello"  (String.append" " "World!")) "Hello World!")): Prop) .

Lemma empty_string_0:( ( (string_equal "" "")): Prop) .
Lemma empty_string_1:( negb ( (string_equal "" "xxx")): Prop) .

Lemma string_cons_0:( ( (string_equal (string_from_char_list (a :: string_to_char_list "")) "a")): Prop) .
Lemma string_cons_1:( ( (string_equal (string_from_char_list (x :: string_to_char_list "yz")) "xyz")): Prop) .

Lemma string_patterns_0:( (
  match ( "") with 
    | empty_string => true
    | _ => false
  end
): Prop) .

Lemma string_patterns_1:( ( (string_equal match ( "abc") with 
    | empty_string => ""
    | cons_string c s => ( String.append(string_make_string( 5%nat) c) s)
  end "aaaaabc")
): Prop) .
