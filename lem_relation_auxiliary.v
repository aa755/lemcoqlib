(* Generated by Lem from relation.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Open Scope nat_scope.
Open Scope string_scope.



(*
instance forall 'a 'b. SetType 'a, SetType 'b => (Eq (rel 'a 'b))
  let (=) = relEq
end
*)

Lemma relToSet_inv:( (forall r,( (set_equal_by (pairCompare setElemCompare setElemCompare) (r) r) : Prop)): Prop) .

Lemma rel_basic_0:( (set_equal_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat)) [(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat)] (relFromPred [ 2%nat;  3%nat] [ 1%nat;  2%nat;  3%nat;  4%nat;  5%nat;  6%nat] (fun (x : nat ) (y : nat ) => beq_nat y (Coq.Init.Peano.plus x( 1%nat))))): Prop) .
Lemma rel_basic_1:( (set_equal_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat)) ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat)]) [( 2%nat, 3%nat);  ( 3%nat, 4%nat)]): Prop) .
Lemma rel_basic_2:( relToPred ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat)])( 2%nat)( 3%nat): Prop) .

Lemma inRel_set :( (forall s  a  b,( Bool.eqb (set_member_by (pairCompare setElemCompare setElemCompare) (a, b) (s)) ( (set_member_by (pairCompare setElemCompare setElemCompare)(a, b) s)) : Prop)): Prop) .
Lemma inRel_pred :( (forall p  a  b  sa  sb,( Bool.eqb (set_member_by (pairCompare setElemCompare setElemCompare) (a, b) (relFromPred sa sb p)) (p a b) && ((set_member_by setElemCompare a sa) && (set_member_by setElemCompare b sb)) : Prop)): Prop) .

Lemma in_rel_0:( ( (set_member_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat))( 2%nat, 3%nat) ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 4%nat, 5%nat)]))): Prop) .
Lemma in_rel_1:( ( (set_member_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat))( 4%nat, 5%nat) ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 4%nat, 5%nat)]))): Prop) .
Lemma in_rel_2:( negb ( (set_member_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat))( 3%nat, 2%nat) ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 4%nat, 5%nat)]))): Prop) .
Lemma in_rel_3:( negb ( (set_member_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat))( 7%nat, 4%nat) ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 4%nat, 5%nat)]))): Prop) .

Lemma relEmpty_0:( (set_equal_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat)) ( []) ([] :  set  ((nat  * nat ) % type))): Prop) .
Lemma relEmpty_1:( negb ( (set_member_by (pairCompare boolCompare (genericCompare nat_ltb beq_nat))(true, ( 2%nat :nat )) ( []))): Prop) .

Lemma relAdd_0 :( (set_member_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat)) (( 2%nat :  nat ), ( 3%nat :  nat )) ((set_add ( 2%nat, 3%nat) (( []))))): Prop) .
Lemma relAdd_1 :( (set_member_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat)) (( 4%nat :  nat ), ( 5%nat :  nat )) ((set_add ( 2%nat, 3%nat) (((set_add ( 4%nat, 5%nat) (( [])))))))): Prop) .
Lemma relAdd_2 :( negb ( (set_member_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat))(( 2%nat :  nat ), ( 5%nat :  nat )) ((set_add ( 2%nat, 3%nat) (((set_add ( 4%nat, 5%nat) (( []))))))))): Prop) .
Lemma relAdd_3 :( negb ( (set_member_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat))(( 4%nat :  nat ), ( 9%nat :  nat )) ((set_add ( 2%nat, 3%nat) (((set_add ( 4%nat, 5%nat) (( []))))))))): Prop) .

Lemma in_relAdd:( (forall a  b  a'  b'  r,( Bool.eqb (set_member_by (pairCompare setElemCompare setElemCompare) (a, b) ((set_add (a',b') (r))))
  ((a = a') && (b = b')) || (set_member_by (pairCompare setElemCompare setElemCompare) (a, b) r) : Prop)): Prop) .

Lemma relId_spec:( (forall x  y  s,( (  Bool.eqb(set_member_by (pairCompare setElemCompare setElemCompare)(x, y) (relIdOn s)) ( (set_member_by setElemCompare x s) && (x = y))) : Prop)): Prop) .

Lemma rel_id_0:( (set_member_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat)) (( 0%nat :nat ), 0%nat) (relIdOn [ 0%nat;  1%nat;  2%nat;  3%nat])): Prop) .
Lemma rel_id_1:( (set_member_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat)) (( 2%nat :nat ), 2%nat) (relIdOn [ 0%nat;  1%nat;  2%nat;  3%nat])): Prop) .
Lemma rel_id_2:( negb ( (set_member_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat))(( 5%nat :nat ), 5%nat) (relIdOn [ 0%nat;  1%nat;  2%nat;  3%nat]))): Prop) .
Lemma rel_id_3:( negb ( (set_member_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat))(( 0%nat :nat ), 2%nat) (relIdOn [ 0%nat;  1%nat;  2%nat;  3%nat]))): Prop) .

Lemma in_rel_union:( (forall a  b  r1  r2,( Bool.eqb (set_member_by (pairCompare setElemCompare setElemCompare) (a, b) (( (set_union_by (pairCompare setElemCompare setElemCompare)(r1) (r2))))) (set_member_by (pairCompare setElemCompare setElemCompare) (a, b) r1) || (set_member_by (pairCompare setElemCompare setElemCompare) (a, b) r2) : Prop)): Prop) .
Lemma rel_union_0:( (set_equal_by (pairCompare (genericCompare nat_ltb beq_nat) boolCompare) ( (set_union_by (pairCompare (genericCompare nat_ltb beq_nat) boolCompare)(((set_add (( 2%nat :nat ),true) (( []))))) (((set_add ( 5%nat,false) (( [])))))))
                    [( 5%nat,false);  ( 2%nat,true)]): Prop) .

Lemma in_rel_inter:( (forall a  b  r1  r2,( Bool.eqb (set_member_by (pairCompare setElemCompare setElemCompare) (a, b) (( (set_inter_by (pairCompare setElemCompare setElemCompare)(r1) (r2))))) (set_member_by (pairCompare setElemCompare setElemCompare) (a, b) r1) && (set_member_by (pairCompare setElemCompare setElemCompare) (a, b) r2) : Prop)): Prop) .
Lemma rel_inter_0:( (set_equal_by (pairCompare (genericCompare nat_ltb beq_nat) boolCompare) ( (set_inter_by (pairCompare (genericCompare nat_ltb beq_nat) boolCompare)(((set_add (( 2%nat :nat ),true) (((set_add ( 7%nat,false) (( [])))))))) (((set_add ( 7%nat,false) (((set_add ( 2%nat,false) (( []))))))))))
                    [( 7%nat,false)]): Prop) .

Lemma rel_comp_1 :( (forall r1  r2  e1  e2  e3,( ((negb ( (set_member_by (pairCompare setElemCompare setElemCompare)(e1, e2) r1) && (set_member_by (pairCompare setElemCompare setElemCompare) (e2, e3) r2))) || (set_member_by (pairCompare setElemCompare setElemCompare) (e1, e3) (relComp r1 r2))) : Prop)): Prop) .
Lemma rel_comp_3 :( (forall r,( ( (set_equal_by (pairCompare setElemCompare setElemCompare)(relComp r ( [])) ( []))) && ( (set_equal_by (pairCompare setElemCompare setElemCompare)(relComp ( []) r) ( []))) : Prop)): Prop) .

Lemma rel_comp_0:( ( (set_equal_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat))(relComp ([(( 2%nat :nat ), ( 4%nat :nat ));  ( 2%nat, 8%nat)]) ([( 4%nat, ( 3%nat :nat ));  ( 2%nat, 8%nat)])) 
                    [( 2%nat, 3%nat)])): Prop) .


Lemma rel_restrict_0:( ( (set_equal_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat))(relRestrict ([(( 2%nat :nat ), ( 4%nat :nat ));  ( 2%nat, 2%nat);  ( 2%nat, 8%nat)]) [ 2%nat;  8%nat]) 
                    [( 2%nat, 8%nat);  ( 2%nat, 2%nat)])): Prop) .

Lemma rel_restrict_empty:( (forall r,( (set_equal_by (pairCompare setElemCompare setElemCompare) (relRestrict r []) ( [])) : Prop)): Prop) .
Lemma rel_restrict_rel_empty:( (forall s,( (set_equal_by (pairCompare setElemCompare setElemCompare) (relRestrict ( []) s) ( [])) : Prop)): Prop) .
Lemma rel_restrict_rel_add:( (forall r  x  y  s,( (set_equal_by (pairCompare setElemCompare setElemCompare) (relRestrict ((set_add (x,y) (r))) s) 
  (if (( (set_member_by setElemCompare x s)) && ( (set_member_by setElemCompare y s))) then (set_add (x,y) ((relRestrict r s))) else relRestrict r s)) : Prop)): Prop) .

Lemma rel_converse_0:( (set_equal_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat)) (relConverse ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)]))
                       [( 3%nat, 2%nat);  ( 4%nat, 3%nat);  ( 5%nat, 4%nat)]): Prop) .
Lemma rel_converse_empty :( (set_equal_by (pairCompare setElemCompare setElemCompare) (relConverse ( [])) ( [])): Prop) .
Lemma rel_converse_add :(forall x  y  r,( (set_equal_by (pairCompare setElemCompare setElemCompare) (relConverse ((set_add (x,y) (r)))) (set_add (y,x) ((relConverse r)))) : Prop): Prop) .
Lemma rel_converse_converse :(forall r,( (set_equal_by (pairCompare setElemCompare setElemCompare) (relConverse (relConverse r)) r) : Prop): Prop) .

Lemma rel_domain_0:( (set_equal_by (genericCompare nat_ltb beq_nat) (relDomain ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)])) [ 2%nat;  3%nat;  4%nat]): Prop) .
Lemma rel_domain_1:( (set_equal_by (genericCompare nat_ltb beq_nat) (relDomain ([(( 5%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)])) [ 3%nat;  4%nat;  5%nat]): Prop) .
Lemma rel_domain_2:( (set_equal_by (genericCompare nat_ltb beq_nat) (relDomain ([(( 3%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)])) [ 3%nat;  4%nat]): Prop) .

Lemma rel_range_0:( (set_equal_by (genericCompare nat_ltb beq_nat) (relRange ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)])) [ 3%nat;  4%nat;  5%nat]): Prop) .
Lemma rel_range_1:( (set_equal_by (genericCompare nat_ltb beq_nat) (relRange ([(( 5%nat :nat ), ( 6%nat :nat ));  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)])) [ 4%nat;  5%nat;  6%nat]): Prop) .
Lemma rel_range_2:( (set_equal_by (genericCompare nat_ltb beq_nat) (relRange ([(( 3%nat :nat ), ( 5%nat :nat ));  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)])) [ 4%nat;  5%nat]): Prop) .

Lemma rel_field_0:( (set_equal_by (genericCompare nat_ltb beq_nat) ( (set_union_by (genericCompare nat_ltb beq_nat)(relDomain ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)])) (relRange ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)])))) [ 2%nat;  3%nat;  4%nat;  5%nat]): Prop) .
Lemma rel_field_1:( (set_equal_by (genericCompare nat_ltb beq_nat) ( (set_union_by (genericCompare nat_ltb beq_nat)(relDomain ([(( 5%nat :nat ), ( 6%nat :nat ));  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)])) (relRange ([(( 5%nat :nat ), ( 6%nat :nat ));  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)])))) [ 3%nat;  4%nat;  5%nat;  6%nat]): Prop) .
Lemma rel_field_2:( (set_equal_by (genericCompare nat_ltb beq_nat) ( (set_union_by (genericCompare nat_ltb beq_nat)(relDomain ([(( 3%nat :nat ), ( 5%nat :nat ));  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)])) (relRange ([(( 3%nat :nat ), ( 5%nat :nat ));  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)])))) [ 3%nat;  4%nat;  5%nat]): Prop) .

Lemma rel_over_0:( relOver ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)]) [ 2%nat;  3%nat;  4%nat;  5%nat]: Prop) .
Lemma rel_over_1:( negb (relOver ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)]) [ 3%nat;  4%nat;  5%nat]): Prop) .

Lemma rel_over_empty:(forall s,( relOver ( []) s : Prop): Prop) .
Lemma rel_over_add:(forall x  y  s  r,( Bool.eqb (relOver ((set_add (x,y) (r))) s) ( (set_member_by setElemCompare x s) && ((set_member_by setElemCompare y s) && relOver r s)) : Prop): Prop) .

Lemma rel_apply_0:( (set_equal_by (genericCompare nat_ltb beq_nat) (relApply ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)]) [ 2%nat;  3%nat]) [ 3%nat;  4%nat]): Prop) .
Lemma rel_apply_1:( (set_equal_by (genericCompare nat_ltb beq_nat) (relApply ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 7%nat);  ( 3%nat, 5%nat)]) [ 2%nat;  3%nat]) [ 3%nat;  5%nat;  7%nat]): Prop) .

Lemma rel_apply_empty_set:(forall r,( (set_equal_by setElemCompare (relApply r []) []) : Prop): Prop) .
Lemma rel_apply_empty:(forall s,( (set_equal_by setElemCompare (relApply ( []) s) []) : Prop): Prop) .
Lemma rel_apply_add:(forall x  y  s  r,( (set_equal_by setElemCompare (relApply ((set_add (x,y) (r))) s) (if ( (set_member_by setElemCompare x s)) then (set_add y (relApply r s)) else relApply r s)) : Prop): Prop) .

Lemma is_subrel_empty :(forall r,( (set_subset_by (pairCompare setElemCompare setElemCompare) (( [])) (r)) : Prop): Prop) .
Lemma is_subrel_empty2 :(forall r,( Bool.eqb (set_subset_by (pairCompare setElemCompare setElemCompare) (r) (( []))) ( (set_equal_by (pairCompare setElemCompare setElemCompare)r ( []))) : Prop): Prop) .
Lemma is_subrel_add :(forall x  y  r1  r2,( Bool.eqb (set_subset_by (pairCompare setElemCompare setElemCompare) (((set_add (x,y) (r1)))) (r2)) ( (set_member_by (pairCompare setElemCompare setElemCompare)(x, y) r2) && (set_subset_by (pairCompare setElemCompare setElemCompare) (r1) (r2))) : Prop): Prop) .

Lemma is_subrel_0 :( (set_subset_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat)) (( [])) (([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)]))): Prop) .
Lemma is_subrel_1 :( (set_subset_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat)) (([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)])) (([( 2%nat, 3%nat);  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)]))): Prop) .
Lemma is_subrel_2 :( (set_subset_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat)) (([(( 2%nat :nat ), ( 3%nat :nat ));  ( 4%nat, 5%nat)])) (([( 2%nat, 3%nat);  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)]))): Prop) .
Lemma is_subrel_3 :( negb ((set_subset_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat)) (([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)])) (([( 2%nat, 3%nat);  ( 4%nat, 5%nat)])))): Prop) .

Lemma is_reflexive_on_0 :( isReflexiveOn ([(( 2%nat :nat ), ( 2%nat :nat ));  ( 3%nat, 3%nat);  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)]) [ 2%nat;  3%nat]: Prop) .
Lemma is_reflexive_on_1 :( negb (isReflexiveOn ([(( 2%nat :nat ), ( 2%nat :nat ));  ( 3%nat, 3%nat);  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)]) [ 2%nat;  4%nat;  3%nat]): Prop) .
Lemma is_reflexive_on_2 :( negb (isReflexiveOn ([(( 2%nat :nat ), ( 2%nat :nat ));  ( 3%nat, 3%nat);  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)]) [ 5%nat;  2%nat]): Prop) .

Lemma is_irreflexive_on_0 :( isIrreflexiveOn ([(( 2%nat :nat ), ( 2%nat :nat ));  ( 3%nat, 3%nat);  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)]) [ 4%nat]: Prop) .
Lemma is_irreflexive_on_1 :( negb (isIrreflexiveOn ([(( 2%nat :nat ), ( 2%nat :nat ));  ( 3%nat, 3%nat);  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)]) [ 2%nat;  4%nat]): Prop) .
Lemma is_irreflexive_on_2 :( negb (isIrreflexiveOn ([(( 2%nat :nat ), ( 2%nat :nat ));  ( 3%nat, 3%nat);  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)]) [ 5%nat;  2%nat]): Prop) .
Lemma is_irreflexive_on_3 :( isIrreflexiveOn ([(( 2%nat :nat ), ( 2%nat :nat ));  ( 3%nat, 3%nat);  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)]) [ 5%nat;  4%nat]: Prop) .

Lemma is_irreflexive_0 :( negb (isIrreflexive ([(( 2%nat :nat ), ( 2%nat :nat ));  ( 3%nat, 3%nat);  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)])): Prop) .
Lemma is_irreflexive_1 :( isIrreflexive ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)]): Prop) .

Lemma is_symmetric_on_0 :( isSymmetricOn ([(( 2%nat :nat ), ( 2%nat :nat ));  ( 3%nat, 3%nat);  ( 3%nat, 4%nat);  ( 4%nat, 5%nat);  ( 5%nat, 4%nat)]) [ 4%nat]: Prop) .
Lemma is_symmetric_on_1 :( isSymmetricOn ([(( 2%nat :nat ), ( 2%nat :nat ));  ( 3%nat, 3%nat);  ( 3%nat, 4%nat);  ( 4%nat, 5%nat);  ( 5%nat, 4%nat)]) [ 3%nat]: Prop) .
Lemma is_symmetric_on_2 :( negb (isSymmetricOn ([(( 2%nat :nat ), ( 2%nat :nat ));  ( 3%nat, 3%nat);  ( 3%nat, 4%nat);  ( 4%nat, 5%nat);  ( 5%nat, 4%nat)]) [ 3%nat;  4%nat]): Prop) .

Lemma is_symmetric_0 :( negb (isSymmetric ([(( 2%nat :nat ), ( 2%nat :nat ));  ( 3%nat, 3%nat);  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)])): Prop) .
Lemma is_symmetric_1 :( isSymmetric ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 2%nat);  ( 4%nat, 5%nat);  ( 5%nat, 4%nat)]): Prop) .

Lemma is_symmetric_empty :(forall r,( isSymmetricOn r [] : Prop): Prop) .
Lemma is_symmetric_sing :(forall r  x,( isSymmetricOn r [x] : Prop): Prop) .

Lemma is_antisymmetric_on_0 :( isAntisymmetricOn ([(( 2%nat :nat ), ( 2%nat :nat ));  ( 3%nat, 3%nat);  ( 3%nat, 4%nat);  ( 4%nat, 5%nat);  ( 5%nat, 4%nat)]) [ 3%nat;  4%nat]: Prop) .
Lemma is_antisymmetric_on_1 :( negb (isAntisymmetricOn ([(( 2%nat :nat ), ( 2%nat :nat ));  ( 3%nat, 3%nat);  ( 3%nat, 4%nat);  ( 4%nat, 5%nat);  ( 5%nat, 4%nat)]) [ 4%nat;  5%nat]): Prop) .

Lemma is_antisymmetric_0 :( isAntisymmetric ([(( 2%nat :nat ), ( 2%nat :nat ));  ( 3%nat, 3%nat);  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)]): Prop) .
Lemma is_antisymmetric_1 :( negb (isAntisymmetric ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 2%nat);  ( 4%nat, 5%nat);  ( 2%nat, 4%nat)])): Prop) .

Lemma is_antisymmetric_empty :(forall r,( isAntisymmetricOn r [] : Prop): Prop) .
Lemma is_antisymmetric_sing :(forall r  x,( isAntisymmetricOn r [x] : Prop): Prop) .

Lemma is_transitive_on_0 :( isTransitiveOn ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat);  ( 2%nat, 4%nat);  ( 4%nat, 5%nat);  ( 5%nat, 4%nat)]) [ 2%nat;  3%nat;  4%nat]: Prop) .
Lemma is_transitive_on_1 :( negb (isTransitiveOn ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat);  ( 2%nat, 4%nat);  ( 4%nat, 5%nat);  ( 5%nat, 4%nat)]) [ 2%nat;  3%nat;  4%nat;  5%nat]): Prop) .

Lemma is_transitive_0 :( negb (isTransitive ([(( 2%nat :nat ), ( 2%nat :nat ));  ( 3%nat, 3%nat);  ( 3%nat, 4%nat);  ( 4%nat, 5%nat)])): Prop) .
Lemma is_transitive_1 :( isTransitive ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat);  ( 2%nat, 4%nat) ]): Prop) .


Lemma is_total_on_0 :( isTotalOn ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat);  ( 3%nat, 3%nat);  ( 4%nat, 4%nat)]) [ 3%nat;  4%nat]: Prop) .
Lemma is_total_on_1 :( negb (isTotalOn ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat);  ( 3%nat, 3%nat);  ( 4%nat, 4%nat)]) [ 2%nat;  4%nat]): Prop) .

Lemma is_trichotomous_on_0 :( isTrichotomousOn ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat)]) [ 3%nat;  4%nat]: Prop) .
Lemma is_trichotomous_on_1 :( negb (isTrichotomousOn ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat)]) [ 2%nat;  3%nat;  4%nat]): Prop) .

Lemma is_single_valued_0 :( isSingleValued ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat)]): Prop) . 
Lemma is_single_valued_1 :( negb (isSingleValued ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 2%nat, 4%nat) ;  ( 3%nat, 4%nat)])): Prop) .


Lemma is_equivalence_0 :( isEquivalenceOn ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 2%nat);  ( 2%nat, 2%nat);  ( 3%nat, 3%nat);  ( 4%nat, 4%nat)]) [ 2%nat;  3%nat;  4%nat]: Prop) .
Lemma is_equivalence_1 :( negb (isEquivalenceOn ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 2%nat);  ( 2%nat, 4%nat);  ( 2%nat, 2%nat);  ( 3%nat, 3%nat);  ( 4%nat, 4%nat)]) [ 2%nat;  3%nat;  4%nat]): Prop) .
Lemma is_equivalence_2 :( negb (isEquivalenceOn ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 2%nat);  ( 2%nat, 2%nat);  ( 3%nat, 3%nat)]) [ 2%nat;  3%nat;  4%nat]): Prop) .

Lemma is_preorder_0 :( isPreorderOn ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 2%nat);  ( 2%nat, 2%nat);  ( 3%nat, 3%nat);  ( 4%nat, 4%nat)]) [ 2%nat;  3%nat;  4%nat]: Prop) .
Lemma is_preorder_1 :( negb (isPreorderOn ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 2%nat, 2%nat);  ( 3%nat, 3%nat)]) [ 2%nat;  3%nat;  4%nat]): Prop) .
Lemma is_preorder_2 :( negb (isPreorderOn ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat);  ( 2%nat, 2%nat);  ( 3%nat, 3%nat);  ( 4%nat, 4%nat)]) [ 2%nat;  3%nat;  4%nat]): Prop) .

Lemma is_partialorder_0 :( isPartialOrderOn ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 2%nat, 2%nat);  ( 3%nat, 3%nat);  ( 4%nat, 4%nat)]) [ 2%nat;  3%nat;  4%nat]: Prop) .
Lemma is_partialorder_1 :( negb (isPartialOrderOn ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 2%nat);  ( 2%nat, 2%nat);  ( 3%nat, 3%nat);  ( 4%nat, 4%nat)]) [ 2%nat;  3%nat;  4%nat]): Prop) .
Lemma is_partialorder_2 :( negb (isPartialOrderOn ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 2%nat, 2%nat);  ( 3%nat, 3%nat)]) [ 2%nat;  3%nat;  4%nat]): Prop) .
Lemma is_partialorder_3 :( negb (isPartialOrderOn ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat);  ( 2%nat, 2%nat);  ( 3%nat, 3%nat);  ( 4%nat, 4%nat)]) [ 2%nat;  3%nat;  4%nat]): Prop) .

Lemma isStrictPartialOrderOn_antisym :( (forall r  s,( ((negb (isStrictPartialOrderOn r s)) || isAntisymmetricOn r s) : Prop)): Prop) .

Lemma is_strict_partialorder_on_0 :( isStrictPartialOrderOn ([(( 2%nat :nat ), ( 3%nat :nat ))]) [ 2%nat;  3%nat;  4%nat]: Prop) .
Lemma is_strict_partialorder_on_1 :( isStrictPartialOrderOn ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat);  ( 2%nat, 4%nat)]) [ 2%nat;  3%nat;  4%nat]: Prop) .
Lemma is_strict_partialorder_on_2 :( negb (isStrictPartialOrderOn ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat)]) [ 2%nat;  3%nat;  4%nat]): Prop) .
Lemma is_strict_partialorder_on_3 :( negb (isStrictPartialOrderOn ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 2%nat)]) [ 2%nat;  3%nat;  4%nat]): Prop) .
Lemma is_strict_partialorder_on_4 :( negb (isStrictPartialOrderOn ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 2%nat, 2%nat)]) [ 2%nat;  3%nat;  4%nat]): Prop) .

Lemma is_strict_partialorder_0 :( isStrictPartialOrder ([(( 2%nat :nat ), ( 3%nat :nat ))]): Prop) .
Lemma is_strict_partialorder_1 :( isStrictPartialOrder ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat);  ( 2%nat, 4%nat)]): Prop) . 
Lemma is_strict_partialorder_2 :( negb (isStrictPartialOrder ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat)])): Prop) .
Lemma is_strict_partialorder_3 :( negb (isStrictPartialOrder ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 2%nat)])): Prop) .
Lemma is_strict_partialorder_4 :( negb (isStrictPartialOrder ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 2%nat, 2%nat)])): Prop) .


Lemma is_totalorder_on_0 :( isTotalOrderOn ([(( 2%nat :nat ), ( 3%nat :nat )); ( 2%nat, 2%nat); ( 3%nat, 3%nat); ( 4%nat, 4%nat)]) [ 2%nat;  3%nat]: Prop) .
Lemma is_totalorder_on_1 :( negb (isTotalOrderOn ([(( 2%nat :nat ), ( 3%nat :nat )); ( 2%nat, 2%nat); ( 3%nat, 3%nat); ( 4%nat, 4%nat)]) [ 2%nat;  3%nat;  4%nat]): Prop) .
Lemma is_totalorder_on_2 :( negb (isTotalOrderOn ([(( 2%nat :nat ), ( 3%nat :nat ))]) [ 2%nat;  3%nat]): Prop) .

Lemma is_strict_totalorder_on_0 :( isStrictTotalOrderOn ([(( 2%nat :nat ), ( 3%nat :nat ))]) [ 2%nat;  3%nat]: Prop) .
Lemma is_strict_totalorder_on_1 :( negb (isStrictTotalOrderOn ([(( 2%nat :nat ), ( 3%nat :nat ))]) [ 2%nat;  3%nat;  4%nat]): Prop) .


Lemma transitiveClosure_spec1:( (forall r,( (set_subset_by (pairCompare setElemCompare setElemCompare) (r) (((set_tc (fun x y => x = y) r)))) : Prop)): Prop) .
Lemma transitiveClosure_spec2:( (forall r,( isTransitive ((set_tc (fun x y => x = y) r)) : Prop)): Prop) .
Lemma transitiveClosure_spec3:( (forall r1  r2,( ((negb ((isTransitive r2) && ((set_subset_by (pairCompare setElemCompare setElemCompare) (r1) (r2))))) || (set_subset_by (pairCompare setElemCompare setElemCompare) (((set_tc (fun x y => x = y) r1))) (r2))) : Prop)): Prop) .
Lemma transitiveClosure_spec4:( (forall r,( ((negb (isTransitive r)) || ( (set_equal_by (pairCompare setElemCompare setElemCompare)(set_tc (fun x y => x = y) r) r))) : Prop)): Prop) .

Lemma transitive_closure_0:( ( (set_equal_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat))(set_tc beq_nat ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat)]))
                              [( 2%nat, 3%nat);  ( 2%nat, 4%nat);  ( 3%nat, 4%nat)])): Prop) .
Lemma transitive_closure_1:( ( (set_equal_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat))(set_tc beq_nat ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat);  ( 4%nat, 5%nat);  ( 7%nat, 9%nat)]))
                              [( 2%nat, 3%nat);  ( 2%nat, 4%nat);  ( 2%nat, 5%nat);  ( 3%nat, 4%nat);  ( 3%nat, 5%nat);  ( 4%nat, 5%nat);  ( 7%nat, 9%nat)])): Prop) .

Lemma transitive_closure_add_thm:(forall x  y  r,( ((negb (isTransitive r)) || ( (set_equal_by (pairCompare setElemCompare setElemCompare)(transitiveClosureAdd x y r) (set_tc (fun x y => x = y) ((set_add (x,y) (r))))))) : Prop): Prop) .

Lemma transitive_closure_add_0:( (set_equal_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat)) (transitiveClosureAdd ( 2%nat :nat ) ( 3%nat :nat ) []) [( 2%nat, 3%nat)]): Prop) .
Lemma transitive_closure_add_1:( (set_equal_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat)) (transitiveClosureAdd ( 3%nat :nat ) ( 4%nat :nat ) [( 2%nat, 3%nat)]) [( 2%nat, 3%nat);  ( 3%nat, 4%nat);  ( 2%nat, 4%nat)]): Prop) .
Lemma transitive_closure_add_2:( (set_equal_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat)) (transitiveClosureAdd ( 4%nat :nat ) ( 5%nat :nat ) [( 2%nat, 3%nat);  ( 3%nat, 4%nat);  ( 2%nat, 4%nat)]) 
                                 [( 2%nat, 3%nat);  ( 3%nat, 4%nat);  ( 2%nat, 4%nat);  ( 4%nat, 5%nat);  ( 2%nat, 5%nat);  ( 3%nat, 5%nat)]): Prop) .

Lemma reflexive_transitive_closure_0:( ( (set_equal_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat))(reflexiveTransitiveClosureOn ([(( 2%nat :nat ), ( 3%nat :nat ));  ( 3%nat, 4%nat)]) [ 2%nat;  3%nat;  4%nat])
                              [( 2%nat, 3%nat);  ( 2%nat, 4%nat);  ( 3%nat, 4%nat);  ( 2%nat, 2%nat);  ( 3%nat, 3%nat);  ( 4%nat, 4%nat)])): Prop) .

Lemma trancl_withoutTransitiveEdges_thm:(forall r,( ((negb true) || (set_equal_by (pairCompare setElemCompare setElemCompare) (set_tc (fun x y => x = y) (withoutTransitiveEdges r)) (set_tc (fun x y => x = y) r))) : Prop): Prop) .

Lemma withoutTransitiveEdges_0:( (set_equal_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat)) (withoutTransitiveEdges [(( 0%nat :nat ), 1%nat)]) [(( 0%nat :nat ), 1%nat)]): Prop) .
Lemma withoutTransitiveEdges_1:( (set_equal_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat)) (withoutTransitiveEdges [(( 0%nat :nat ), 1%nat);  ( 1%nat, 2%nat);  ( 0%nat, 2%nat)]) 
                                 [(( 0%nat :nat ), 1%nat);  ( 1%nat, 2%nat)]): Prop) .
Lemma withoutTransitiveEdges_2:( (set_equal_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat)) (withoutTransitiveEdges [(( 0%nat :nat ), 1%nat);  ( 1%nat, 2%nat);  ( 2%nat, 3%nat);  ( 0%nat, 3%nat)]) 
                                 [(( 0%nat :nat ), 1%nat);  ( 1%nat, 2%nat);  ( 2%nat, 3%nat)]): Prop) .
Lemma withoutTransitiveEdges_3:( (set_equal_by (pairCompare (genericCompare nat_ltb beq_nat) (genericCompare nat_ltb beq_nat)) (withoutTransitiveEdges [(( 0%nat :nat ), 0%nat);  ( 0%nat, 1%nat)]) 
                                 [(( 0%nat :nat ), 0%nat);  ( 0%nat, 1%nat)]): Prop) .
