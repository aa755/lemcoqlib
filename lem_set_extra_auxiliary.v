(* Generated by Lem from set_extra.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Open Scope nat_scope.
Open Scope string_scope.




Lemma toList_0:( (list_equal_by beq_nat (set_to_list ([] :  set  nat )) []): Prop) .
Lemma toList_1:( (set_member_by (lexicographicCompareBy (genericCompare nat_ltb beq_nat)) (set_to_list [( 6%nat :nat );  1%nat;  2%nat]) [[ 1%nat; 2%nat; 6%nat];  [ 1%nat; 6%nat; 2%nat];  [ 2%nat; 1%nat; 6%nat];  [ 2%nat; 6%nat; 1%nat];  [ 6%nat; 1%nat; 2%nat];  [ 6%nat; 2%nat; 1%nat]]): Prop) .
Lemma toList_2:( (list_equal_by beq_nat (set_to_list ([( 2%nat :nat )] :  set  nat )) [ 2%nat]): Prop) .

Lemma toOrderedList_0:( (list_equal_by beq_nat (insertSortBy nat_lteb (set_to_list ([] :  set  nat ))) []): Prop) .
Lemma toOrderedList_1:( (list_equal_by beq_nat (insertSortBy nat_lteb (set_to_list [( 6%nat :nat );  1%nat;  2%nat])) [ 1%nat; 2%nat; 6%nat]): Prop) .
Lemma toOrderedList_2:( (list_equal_by beq_nat (insertSortBy nat_lteb (set_to_list ([( 2%nat :nat )] :  set  nat ))) [ 2%nat]): Prop) .

Lemma lfp_empty:( (set_equal_by (genericCompare nat_ltb beq_nat) (leastFixedPointUnbounded (map (fun (x : nat ) => x)) ([] :  set  nat )) []): Prop) .
Lemma lfp_saturate_neg:( (set_equal_by (genericCompare int_ltb Z.eqb) (leastFixedPointUnbounded (map (fun (x : Z ) => (Coq.ZArith.BinInt.Z.sub Z0 x))) ([(Z.pred (Z.pos (P_of_succ_nat 1%nat))); (Z.pred (Z.pos (P_of_succ_nat 2%nat))); (Z.pred (Z.pos (P_of_succ_nat 3%nat)))] :  set  Z )) [(Coq.ZArith.BinInt.Z.sub Z0 ((Z.pred (Z.pos (P_of_succ_nat 3%nat)))));  (Coq.ZArith.BinInt.Z.sub Z0 ((Z.pred (Z.pos (P_of_succ_nat 2%nat)))));  (Coq.ZArith.BinInt.Z.sub Z0 ((Z.pred (Z.pos (P_of_succ_nat 1%nat))))); (Z.pred (Z.pos (P_of_succ_nat 1%nat))); (Z.pred (Z.pos (P_of_succ_nat 2%nat))); (Z.pred (Z.pos (P_of_succ_nat 3%nat)))]): Prop) .
Lemma lfp_saturate_mod:( (set_equal_by (genericCompare nat_ltb beq_nat) (leastFixedPointUnbounded (map (fun (x : nat ) => Coq.Numbers.Natural.Peano.NPeano.modulo (Coq.Init.Peano.mult( 2%nat)x)( 5%nat))) ([ 1%nat] :  set  nat )) [ 1%nat;  2%nat;  3%nat;  4%nat]): Prop) .
