(* Generated by Lem from maybe.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Open Scope nat_scope.
Open Scope string_scope.



Lemma maybe_eq_1:( ( (maybeEqualBy Bool.eqb(None :  option  bool  ) None)): Prop) .  
Lemma maybe_eq_2:( ( negb ((maybeEqualBy Bool.eqb (Some true) None))): Prop) .
Lemma maybe_eq_3:( ( negb ((maybeEqualBy Bool.eqb (Some false) (Some true)))): Prop) .  
Lemma maybe_eq_4:( ( (maybeEqualBy Bool.eqb(Some false) (Some false))): Prop) .

Lemma maybe_1:( ( Bool.eqb(maybe true negb None) true): Prop) .
Lemma maybe_2:( ( Bool.eqb(maybe false negb None) false): Prop) .
Lemma maybe_3:( ( Bool.eqb(maybe true negb (Some true)) false): Prop) .
Lemma maybe_4:( ( Bool.eqb(maybe true negb (Some false)) true): Prop) .

Lemma isJust_1:( (isJust (Some true)): Prop) .
Lemma isJust_2:( (negb (isJust (None :  option  bool  ))): Prop) .

Lemma isNothing_1:( (negb (isNothing (Some true))): Prop) .
Lemma isNothing_2:( (isNothing (None :  option  bool  )): Prop) .

Lemma isJustNothing:( (
  (forall x,( Bool.eqb (isNothing x) (negb (isJust x)) : Prop)) &&
  ((forall v,( isJust (Some v) : Prop)) &&
  (isNothing None))): Prop) .

Lemma fromMaybe:( (
  (forall d  v,( fromMaybe d (Some v) = v : Prop)) &&
  (forall d,( fromMaybe d None = d : Prop))): Prop) .

Lemma fromMaybe_1:( ( Bool.eqb(fromMaybe true None) true): Prop) .
Lemma fromMaybe_2:( ( Bool.eqb(fromMaybe false None) false): Prop) .
Lemma fromMaybe_3:( ( Bool.eqb(fromMaybe true (Some true)) true): Prop) .
Lemma fromMaybe_4:( ( Bool.eqb(fromMaybe true (Some false)) false): Prop) . 
Lemmamap_def_lemma:((forallf,(classical_boolean_equivalence (maybe None (fun (v : a) => Some (f v))) 
  (option_map f) : Prop)): Prop) .

Lemma maybe_map:( (
  (forall f,( (maybeEqualBy (fun x y => x = y) (option_map f None) None) : Prop)) &&
  (forall f  v,( (maybeEqualBy (fun x y => x = y) (option_map f (Some v)) (Some (f v))) : Prop))): Prop) .

Lemma map_1:( ( (maybeEqualBy Bool.eqb(option_map negb None) None)): Prop) .
Lemma map_2:( ( (maybeEqualBy Bool.eqb(option_map negb (Some true)) (Some false))): Prop) .
Lemma map_3:( ( (maybeEqualBy Bool.eqb(option_map negb (Some false)) (Some true))): Prop) .

Lemma maybe_bind:( (
  (forall f,( (maybeEqualBy (fun x y => x = y) (bind None f) None) : Prop)) &&
  (forall f  v,( (maybeEqualBy (fun x y => x = y) (bind (Some v) f) (f v)) : Prop))): Prop) .

Lemma bind_1:( ( (maybeEqualBy Bool.eqb(bind None (fun (b : bool ) => Some (negb b))) None)): Prop) .
Lemma bind_2:( ( (maybeEqualBy Bool.eqb(bind (Some true) (fun (b : bool ) => Some (negb b))) (Some false))): Prop) .
Lemma bind_3:( ( (maybeEqualBy Bool.eqb(bind (Some false) (fun (b : bool ) => Some (negb b))) (Some true))): Prop) .
Lemma bind_4:( ( (maybeEqualBy Bool.eqb(bind (Some false) (fun (b : bool ) => (None :  option  bool  ))) None)): Prop) .
