(* Generated by Lem from function_extra.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Open Scope nat_scope.
Open Scope string_scope.



(* ----------------------- *)
(* Tests for function      *)
(* ----------------------- *)

(* These tests are not written in function itself, because the nat type
   is not available there, yet *)

Lemma id_0:( beq_nat ( 2%nat :nat )( 2%nat): Prop) .
Lemma id_1:( beq_nat ( 5%nat :nat )( 5%nat): Prop) .
Lemma id_2:( beq_nat ( 2%nat :nat )( 2%nat): Prop) .

Lemma const_0:( beq_nat ((const ( 2%nat :nat )) true)( 2%nat): Prop) .
Lemma const_1:( beq_nat ((const ( 5%nat :nat )) false)( 5%nat): Prop) .
Lemma const_2:( beq_nat ((const ( 2%nat :nat )) ( 3%nat :nat ))( 2%nat): Prop) .

Lemma comb_0:( ( beq_nat(compose (fun  (x:nat ) => Coq.Init.Peano.mult( 3%nat) x) S( 2%nat))( 9%nat)): Prop) .
Lemma comb_1:( ( beq_nat(compose S (fun  (x:nat ) => Coq.Init.Peano.mult( 3%nat) x)( 2%nat))( 7%nat)): Prop) .

Lemma apply_0:( beq_nat (apply (fun  (x:nat ) => Coq.Init.Peano.mult( 3%nat) x)( 2%nat))( 6%nat): Prop) .
Lemma apply_1:( beq_nat  (apply(fun  (x:nat ) => Coq.Init.Peano.mult( 3%nat) x)( 2%nat))( 6%nat): Prop) .

Lemma flip_0:( beq_nat (flip (fun  (x:nat ) (y : nat ) => Coq.Init.Peano.minus x y)( 3%nat)( 5%nat))( 2%nat): Prop) .
Lemma flip_1:( beq_nat (flip (fun  (x:nat ) (y : nat ) => Coq.Init.Peano.minus x y)( 5%nat)( 3%nat))( 0%nat): Prop) .

