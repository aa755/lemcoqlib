(* Generated by Lem from bool.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Open Scope nat_scope.
Open Scope string_scope.


Lemmanot_def_lemma:((forallb,(Bool.eqb match ( b) with 
  | true => false
  | false => true
end (negb b) : Prop)): Prop) .

Lemma not_1 :( negb (negb true): Prop) .
Lemma not_2 :( negb false: Prop) .
Lemmaand_def_lemma:((forallb1 b2,(Bool.eqb match ( (b1, b2)) with 
  | (true,  true) => true
  | _ => false
end ((fun x y => x && y) b1 b2) : Prop)): Prop) .

Lemma and_1 :( (negb (true && false)): Prop) .
Lemma and_2 :( (negb (false && true)): Prop) .
Lemma and_3 :( (negb (false && false)): Prop) .
Lemma and_4 :( (true && true): Prop) .
Lemmaor_def_lemma:((forallb1 b2,(Bool.eqb match ( (b1, b2)) with 
  | (false,  false) => false
  | _ => true
end ((fun x y => x || y) b1 b2) : Prop)): Prop) .

Lemma or_1 :( (true || false): Prop) .
Lemma or_2 :( (false || true): Prop) .
Lemma or_3 :( (true || true): Prop) .
Lemma or_4 :( (negb (false || false)): Prop) .
Lemmaimp_def_lemma:((forallb1 b2,(Bool.eqb match ( (b1, b2)) with 
  | (true,  false) => false
  | _ => true
end ((negb b1) || b2) : Prop)): Prop) .

Lemma imp_1 :( (negb ( ((negb true) || false))): Prop) .
Lemma imp_2 :( ( ((negb false) || true)): Prop) .
Lemma imp_3 :( ( ((negb false) || false)): Prop) .
Lemma imp_4 :( ( ((negb true) || true)): Prop) .
Lemmaequiv_def_lemma:((forallb1 b2,(Bool.eqb match ( (b1, b2)) with 
  | (true,  true) => true
  | (false,  false) => true
  | _ => false
end (Bool.eqb b1 b2) : Prop)): Prop) .

Lemma equiv_1 :( (negb ( Bool.eqbtrue false)): Prop) .
Lemma equiv_2 :( (negb ( Bool.eqbfalse true)): Prop) .
Lemma equiv_3 :( ( Bool.eqbfalse false): Prop) .
Lemma equiv_4 :( ( Bool.eqbtrue true): Prop) .

Lemma xor_1 :( (negb ( Bool.eqbtrue false)): Prop) .
Lemma xor_2 :( (negb ( Bool.eqbfalse true)): Prop) .
Lemma xor_3 :( (negb (negb ( Bool.eqbtrue true))): Prop) .
Lemma xor_4 :( (negb (negb ( Bool.eqbfalse false))): Prop) .

